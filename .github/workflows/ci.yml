name: CI

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: cdzombak/xrp
  BUILDER_IMAGE_NAME: cdzombak/xrp-builder
  FPM_VERSION: 1.15.1

jobs:
  test-go:
    name: Go Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Start Redis
        uses: supercharge/redis-github-action@1.7.0
        with:
          redis-version: '7'

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  test-docker-build:
    name: Test Docker Build
    runs-on: namespace-profile-xrp
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v7

      - name: Set up Docker Buildx
        uses: namespacelabs/nscloud-setup-buildx-action@v0

      - name: Test builder image build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/docker/Dockerfile.builder
          platforms: linux/amd64
          build-args: |
            XRP_VERSION=test
          tags: ghcr.io/cdzombak/xrp-builder:test
          load: true

      - name: Test XRP image build
        run: |
          # Use default docker context to access locally built images
          docker context use default

          # Build XRP image using locally built builder image
          docker buildx build \
            --builder default \
            --platform linux/amd64 \
            --build-arg VERSION=test \
            --target test \
            --load \
            -f build/docker/Dockerfile.xrp \
            .

  test-plugin-sdk:
    name: Test Plugin SDK
    runs-on: namespace-profile-xrp
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v7

      - name: Set up Docker Buildx
        uses: namespacelabs/nscloud-setup-buildx-action@v0

      - name: Build XRP builder image first
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/docker/Dockerfile.builder
          platforms: linux/amd64
          build-args: |
            XRP_VERSION=test
          tags: ghcr.io/cdzombak/xrp-builder:test
          load: true

      - name: Build binary locally
        run: |
          # Build single binary for validation
          docker buildx build \
            --builder default \
            --platform linux/amd64 \
            --build-arg VERSION=test \
            --target binary \
            --output type=local,dest=./dist \
            -f build/docker/Dockerfile.xrp \
            .

          # Verify binary was created
          ls -la dist/xrp
          ./dist/xrp --version

      - name: Test minimal plugin build with XRP SDK
        working-directory: build/sdk/examples/minimal
        run: |
          # Use default docker context to access locally built images
          docker context use default

          # Build using existing Dockerfile with XRP builder image (single platform, local only)
          docker buildx build \
            --builder default \
            --platform linux/amd64 \
            --build-arg XRP_VERSION=test \
            --target output \
            --output type=local,dest=./dist \
            .

          # Verify the plugin was built
          ls -la dist/plugin.so

  lint:
    name: Lint/Go
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest

      - name: Run go vet
        run: go vet ./...

  actionlint:
    name: Lint/Actionlint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Run actionlint
        uses: raven-actions/actionlint@v2
        with:
          files: ".github/workflows/*.yml"

  meta:
    name: Derive Build Metadata
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Derive version string
        id: version
        run: echo "version=$(./.version.sh)" >> "$GITHUB_OUTPUT"
      - name: version
        run: "echo version: ${{ steps.version.outputs.version }}"
    outputs:
      version: ${{ steps.version.outputs.version }}
      aptly_repo_name: oss
      aptly_dist: any
      aptly_publish_prefix: s3:dist.cdzombak.net:deb_oss
      is_prerelease: >-
        ${{
          startsWith(github.ref, 'refs/tags/v') &&
            (contains(github.ref, '-alpha.')
            || contains(github.ref, '-beta.')
            || contains(github.ref, '-rc.'))
        }}
      is_release: >-
        ${{
          startsWith(github.ref, 'refs/tags/v') &&
            !(contains(github.ref, '-alpha.')
            || contains(github.ref, '-beta.')
            || contains(github.ref, '-rc.'))
        }}
      is_pull_request: ${{ github.event_name == 'pull_request' }}

  # For main branch and version tags: full build and push workflow
  build-builder:
    needs: [ test-go, meta, lint ]
    name: Build and Push Builder Image
    runs-on: namespace-profile-xrp
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v7

      - name: Set up Docker Buildx
        uses: namespacelabs/nscloud-setup-buildx-action@v0

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push builder image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/docker/Dockerfile.builder
#          platforms: linux/amd64,linux/arm64,linux/arm/v7
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BUILDER_IMAGE_NAME }}:${{ needs.meta.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.BUILDER_IMAGE_NAME }}:latest
          build-args: |
            XRP_VERSION=${{ needs.meta.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.description=XRP Plugin Builder Image
            org.opencontainers.image.licenses=GPL-3.0
            org.opencontainers.image.version=${{ needs.meta.outputs.version }}
            xrp.version=${{ needs.meta.outputs.version }}
            go.version=1.24.5
            debian.version=bookworm

  # Step 2: Build multi-platform binaries using the builder image
  build-binaries:
    name: Build Binaries & Debian Packages
    runs-on: namespace-profile-xrp
    needs: [ build-builder, meta ]
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            arch: amd64
            deb: amd64
            variant: ""
          - platform: linux/arm64
            arch: arm64
            deb: arm64
            variant: ""
#          - platform: linux/arm/v7
#            arch: arm
#            variant: v7
#            deb: armhf
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v7

      - name: Set up Docker Buildx
        uses: namespacelabs/nscloud-setup-buildx-action@v0

      - name: Build binary using builder image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/docker/Dockerfile.xrp
          platforms: ${{ matrix.platform }}
          target: binary
          outputs: type=local,dest=./dist
          build-args: |
            VERSION=${{ needs.meta.outputs.version }}
            TARGETARCH=${{ matrix.arch }}
            TARGETVARIANT=${{ matrix.variant }}

      - name: Rename binary
        run: |
          mv dist/xrp dist/xrp-${{ needs.meta.outputs.version }}-${{ matrix.arch }}${{ matrix.variant }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: xrp-${{ needs.meta.outputs.version }}-${{ matrix.arch }}${{ matrix.variant }}
          path: dist/xrp-${{ needs.meta.outputs.version }}-${{ matrix.arch }}${{ matrix.variant }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true
      - name: Install fpm
        run: |
          gem install --no-document fpm -v "$FPM_VERSION"

      - name: Build Debian package
        if: matrix.deb
        run: |
          fpm -t deb \
            -v ${{ needs.meta.outputs.version }} \
            -p ./dist/xrp-${{ needs.meta.outputs.version }}-${{ matrix.deb }}.deb \
            -a ${{ matrix.deb }} \
            -n xrp \
            -s dir \
            --description "HTML/XML-aware reverse proxy" \
            --url "https://github.com/cdzombak/xrp" \
            --maintainer "Chris Dzombak <chris@dzombak.com>" \
            --license GPL-3.0 \
            --vendor "Chris Dzombak" \
            ./dist/xrp-${{ needs.meta.outputs.version }}-${{ matrix.arch }}${{ matrix.variant }}=/usr/bin/xrp

      - name: Upload Debian package artifact
        if: matrix.deb
        uses: actions/upload-artifact@v4
        with:
          name: xrp-${{ needs.meta.outputs.version }}-${{ matrix.deb }}.deb
          path: dist/xrp-${{ needs.meta.outputs.version }}-${{ matrix.deb }}.deb

  # Step 3: Build and push XRP Docker images using the builder image
  build-images:
    name: Build and Push XRP Images
    runs-on: namespace-profile-xrp
    needs: [ build-builder, meta ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: namespacelabs/nscloud-checkout-action@v7

      - name: Set up Docker Buildx
        uses: namespacelabs/nscloud-setup-buildx-action@v0

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine tags
        id: tags
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v*" ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> "$GITHUB_OUTPUT"
          else
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main" >> "$GITHUB_OUTPUT"
          fi

      - name: Build and push XRP images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/docker/Dockerfile.xrp
#          platforms: linux/amd64,linux/arm64,linux/arm/v7
          platforms: linux/amd64,linux/arm64
          target: runtime
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          build-args: |
            VERSION=${{ needs.meta.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.description=XRP HTML/XML-aware Reverse Proxy
            org.opencontainers.image.licenses=GPL-3.0
            org.opencontainers.image.version=${{ needs.meta.outputs.version }}

  # Step 4: Create GitHub Release (semver tags only)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [ test-go, test-docker-build, test-plugin-sdk, build-builder, build-binaries, build-images, meta ]
    if: >-
      needs.meta.outputs.is_release == 'true' ||
      needs.meta.outputs.is_prerelease == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all binary artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: "xrp-*"
          path: artifacts/

      - name: Prepare release artifacts
        run: |
          mkdir release
          
          # Copy binaries and Debian packages
          find ./artifacts -name "xrp-*" -type f -exec cp {} release/ \;
          
          # Create compatibility.json
          cat > release/compatibility.json << EOF
          {
            "xrp_version": "${{ needs.meta.outputs.version }}",
            "builder_image": "${{ env.REGISTRY }}/${{ env.BUILDER_IMAGE_NAME }}:${{ needs.meta.outputs.version }}",
            "go_version": "$(grep '^go ' go.mod | cut -d' ' -f2)",
            "supported_platforms": ["linux/amd64", "linux/arm64", "linux/arm/v7"],
            "plugin_interface": {
              "package": "github.com/cdzombak/xrp/pkg/xrpplugin",
              "version": "${{ needs.meta.outputs.version }}"
            },
            "build_requirements": {
              "cgo_enabled": true,
              "debian_base": "bookworm-slim"
            }
          }
          EOF
          
          # Package SDK
          tar czf release/xrp-plugin-sdk.tar.gz -C build/sdk .
          
          # Create checksums
          cd release
          sha256sum ./* > checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*
          generate_release_notes: true
          draft: false
          prerelease: false

  tags:
    name: Update Release Tags
    needs: [ meta, release ]
    if: needs.meta.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Update running major/minor version tags
        uses: sersoft-gmbh/running-release-tags-action@v3
        with:
          fail-on-non-semver-tag: true
          create-release: false
          update-full-release: false

  aptly:
    name: Aptly
    needs: [ meta, build-binaries ]
    if: needs.meta.outputs.is_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download binaries & packages
        uses: actions/download-artifact@v5
        with:
          path: out
      - name: List artifacts
        run: ls -R
        working-directory: out

      - name: Login to Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:github-actions

      - name: Push to Aptly Repo
        shell: bash
        run: |
          set -x
          for DEB in ./out/*.deb; do
            curl -u "${{ secrets.APTLY_CRED }}" \
              -fsS -X POST \
              -F file=@"${DEB}" \
              "${{ secrets.APTLY_API }}/files/xrp-${{ needs.meta.outputs.version }}"
          done
          curl -u "${{ secrets.APTLY_CRED }}" \
            -fsS -X POST \
            "${{ secrets.APTLY_API }}/repos/${{ needs.meta.outputs.aptly_repo_name }}/file/xrp-${{ needs.meta.outputs.version }}?forceReplace=1"

      - name: Update Published Aptly Repo
        run: |
          set -x
          curl -u "${{ secrets.APTLY_CRED }}" \
            -fsS -X PUT \
            -H 'Content-Type: application/json' \
            --data '{"ForceOverwrite": true}' \
            "${{ secrets.APTLY_API }}/publish/${{ needs.meta.outputs.aptly_publish_prefix }}/${{ needs.meta.outputs.aptly_dist }}?_async=true"

  ntfy:
    name: Ntfy
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [ test-go, test-docker-build, test-plugin-sdk, lint, meta, build-builder, build-binaries, build-images, release, aptly ]
    permissions:
      contents: read
    steps:
      - name: Send success notification
        uses: niniyas/ntfy-action@master
        if: ${{ !contains(needs.*.result, 'failure') && (needs.meta.outputs.is_release == 'true' || needs.meta.outputs.is_prerelease == 'true') }}
        with:
          url: "https://ntfy.cdzombak.net"
          topic: "gha-builds"
          priority: 3
          headers: '{"authorization": "Bearer ${{ secrets.NTFY_TOKEN }}"}'
          tags: white_check_mark
          title: ${{ github.event.repository.name }} ${{ needs.meta.outputs.version }} available
          details: ${{ github.event.repository.name }} version ${{ needs.meta.outputs.version }} is now available.
      - name: Send failure notification
        uses: niniyas/ntfy-action@master
        if: ${{ contains(needs.*.result, 'failure') }}
        with:
          url: "https://ntfy.cdzombak.net"
          topic: "gha-builds"
          priority: 3
          headers: '{"authorization": "Bearer ${{ secrets.NTFY_TOKEN }}"}'
          tags: no_entry
          title: ${{ github.event.repository.name }} ${{ needs.meta.outputs.version }} build failed
          details: Build failed for ${{ github.event.repository.name }} version ${{ needs.meta.outputs.version }}.
