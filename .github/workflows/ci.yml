name:  CI

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: cdzombak/xrp
  BUILDER_IMAGE_NAME: cdzombak/xrp-builder
  FPM_VERSION: 1.15.1

jobs:
  test-go:
    name: Go Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Start Redis
        uses: supercharge/redis-github-action@1.7.0
        with:
          redis-version: '7'

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  test-docker-build:
    name: Test Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test builder image build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/docker/Dockerfile.builder
          platforms: linux/amd64
          build-args: |
            XRP_VERSION=test
          tags: ghcr.io/cdzombak/xrp-builder:test
          load: true

      - name: Test XRP image build
        run: |
          # Use default docker context to access locally built images
          docker context use default

          # Build XRP image using locally built builder image
          docker buildx build \
            --builder default \
            --platform linux/amd64 \
            --build-arg VERSION=test \
            --target test \
            --load \
            -f build/docker/Dockerfile.xrp \
            .

  test-plugin-sdk:
    name: Test Plugin SDK
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build XRP builder image first
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/docker/Dockerfile.builder
          platforms: linux/amd64
          build-args: |
            XRP_VERSION=test
          tags: ghcr.io/cdzombak/xrp-builder:test
          load: true

      - name: Build binary locally
        run: |
          # Build single binary for validation
          docker buildx build \
            --builder default \
            --platform linux/amd64 \
            --build-arg VERSION=test \
            --target binary \
            --output type=local,dest=./dist \
            -f build/docker/Dockerfile.xrp \
            .

          # Verify binary was created
          ls -la dist/xrp
          ./dist/xrp --version

      - name: Test minimal plugin build with XRP SDK
        working-directory: build/sdk/examples/minimal
        run: |
          # Use default docker context to access locally built images
          docker context use default

          # Build using existing Dockerfile with XRP builder image (single platform, local only)
          docker buildx build \
            --builder default \
            --platform linux/amd64 \
            --build-arg XRP_VERSION=test \
            --target output \
            --output type=local,dest=./dist \
            .

          # Verify the plugin was built
          ls -la dist/plugin.so


  # For main branch and tags: full build and push workflow
  # Step 1: Build and push builder image first
  build-builder:
    needs: [test-go]
    name: Build and Push Builder Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=main" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push builder image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/docker/Dockerfile.builder
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BUILDER_IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.BUILDER_IMAGE_NAME }}:latest
          build-args: |
            XRP_VERSION=${{ steps.version.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.description=XRP Plugin Builder Image
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            xrp.version=${{ steps.version.outputs.version }}
            go.version=1.24.5
            debian.version=bookworm

  # Step 2: Build multi-platform binaries using the builder image
  build-binaries:
    name: Build Binaries & Debian Packages
    runs-on: ubuntu-latest
    needs: [build-builder]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            arch: amd64
            deb: amd64
          - platform: linux/arm64
            arch: arm64
            deb: arm64
          - platform: linux/arm/v7
            arch: arm
            variant: v7
            deb: armhf
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build binary using builder image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/docker/Dockerfile.xrp
          platforms: ${{ matrix.platform }}
          target: binary
          outputs: type=local,dest=./dist
          build-args: |
            VERSION=${{ needs.build-builder.outputs.version }}
            TARGETARCH=${{ matrix.arch }}
            TARGETVARIANT=${{ matrix.variant }}
      
      - name: Rename binary
        run: |
          mv dist/xrp dist/xrp-${{ matrix.arch }}${{ matrix.variant }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: true
      - name: Install fpm
        run: |
          gem install --no-document fpm -v "$FPM_VERSION"

      - name: Build Debian package
        if: matrix.deb
        run: |
          fpm -t deb \
            -v ${{ needs.build-builder.outputs.version }} \
            -p ./dist/xrp-${{ needs.build-builder.outputs.version }}-${{ matrix.deb }}.deb \
            -a ${{ matrix.deb }} \
            -n xrp \
            -s dir \
            --description "XRP HTML/XML-aware Reverse Proxy" \
            --url "https://github.com/cdzombak/xrp" \
            --maintainer "Chris Dzombak <chris@dzombak.com>" \
            --license MIT \
            --vendor "Chris Dzombak" \
            ./dist/xrp-${{ matrix.arch }}${{ matrix.variant }}=/usr/bin/xrp

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: xrp-${{ matrix.arch }}${{ matrix.variant }}
          path: dist/xrp-${{ matrix.arch }}${{ matrix.variant }}
      
      - name: Upload Debian package artifact
        if: matrix.deb
        uses: actions/upload-artifact@v4
        with:
          name: xrp-${{ needs.build-builder.outputs.version }}-${{ matrix.deb }}.deb
          path: dist/xrp-${{ needs.build-builder.outputs.version }}-${{ matrix.deb }}.deb

  # Step 3: Build and push XRP Docker images using the builder image
  build-images:
    name: Build and Push XRP Images
    runs-on: ubuntu-latest
    needs: [build-builder]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Determine tags
        id: tags
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          else
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push XRP images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/docker/Dockerfile.xrp
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          target: runtime
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          build-args: |
            VERSION=${{ needs.build-builder.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.description=XRP HTML/XML-aware Reverse Proxy
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.version=${{ needs.build-builder.outputs.version }}

  # Step 4: Create GitHub Release (semver tags only)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test-go, test-docker-build, test-plugin-sdk, build-builder, build-binaries, build-images]
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref_name, '-')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all binary artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts/
      
      - name: Prepare release artifacts
        run: |
          mkdir release
          
          # Copy binaries and Debian packages
          for dir in artifacts/xrp-*; do
            if [ -d "$dir" ]; then
              cp "$dir"/* release/
            fi
          done
          
          # Create compatibility.json
          cat > release/compatibility.json << EOF
          {
            "xrp_version": "${{ needs.build-builder.outputs.version }}",
            "builder_image": "${{ env.REGISTRY }}/${{ env.BUILDER_IMAGE_NAME }}:${{ needs.build-builder.outputs.version }}",
            "go_version": "$(grep '^go ' go.mod | cut -d' ' -f2)",
            "supported_platforms": ["linux/amd64", "linux/arm64", "linux/arm/v7"],
            "plugin_interface": {
              "package": "github.com/cdzombak/xrp/pkg/xrpplugin",
              "version": "${{ needs.build-builder.outputs.version }}"
            },
            "build_requirements": {
              "cgo_enabled": true,
              "debian_base": "bookworm-slim"
            }
          }
          EOF
          
          # Package SDK
          tar czf release/xrp-plugin-sdk.tar.gz -C build/sdk .
          
          # Create checksums
          cd release
          sha256sum * > checksums.txt
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*
          generate_release_notes: true
          draft: false
          prerelease: false
