name: Build and Release

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: cdzombak/xrp
  BUILDER_IMAGE_NAME: cdzombak/xrp-builder

jobs:
  # For PRs and non-main branches: local Docker builds only (fast feedback)
  pr-build:
    name: PR Build (Local)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build builder image locally
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/docker/Dockerfile.builder
          platforms: linux/amd64
          build-args: |
            XRP_VERSION=dev
          tags: ${{ env.REGISTRY }}/${{ env.BUILDER_IMAGE_NAME }}:dev
          load: true
      
      - name: Build and test XRP image locally
        run: |
          # Use default docker context for local images
          docker context use default
          
          # Build XRP image using locally built builder
          docker buildx build \
            --builder default \
            --platform linux/amd64 \
            --build-arg VERSION=dev \
            --target test \
            --load \
            -f build/docker/Dockerfile.xrp \
            .
      
      - name: Build binary locally
        run: |
          # Build single binary for validation
          docker buildx build \
            --builder default \
            --platform linux/amd64 \
            --build-arg VERSION=dev \
            --target binary \
            --output type=local,dest=./dist \
            -f build/docker/Dockerfile.xrp \
            .
          
          # Verify binary was created
          ls -la dist/xrp
          ./dist/xrp --version

  # For main branch and tags: full build and push workflow
  # Step 1: Build and push builder image first
  build-builder:
    name: Build and Push Builder Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=main" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push builder image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/docker/Dockerfile.builder
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.BUILDER_IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.BUILDER_IMAGE_NAME }}:latest
          build-args: |
            XRP_VERSION=${{ steps.version.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.description=XRP Plugin Builder Image
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            xrp.version=${{ steps.version.outputs.version }}
            go.version=1.24.5
            debian.version=bookworm

  # Step 2: Build multi-platform binaries using the builder image
  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [build-builder]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            arch: amd64
          - platform: linux/arm64
            arch: arm64
          - platform: linux/arm/v7
            arch: arm
            variant: v7
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build binary using builder image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/docker/Dockerfile.xrp
          platforms: ${{ matrix.platform }}
          target: binary
          outputs: type=local,dest=./dist
          build-args: |
            VERSION=${{ needs.build-builder.outputs.version }}
            TARGETARCH=${{ matrix.arch }}
            TARGETVARIANT=${{ matrix.variant }}
      
      - name: Rename binary
        run: |
          mv dist/xrp dist/xrp-${{ matrix.arch }}${{ matrix.variant }}
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: xrp-${{ matrix.arch }}${{ matrix.variant }}
          path: dist/xrp-${{ matrix.arch }}${{ matrix.variant }}

  # Step 3: Build and push XRP Docker images using the builder image
  build-images:
    name: Build and Push XRP Images
    runs-on: ubuntu-latest
    needs: [build-builder]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Determine tags
        id: tags
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          else
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and push XRP images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/docker/Dockerfile.xrp
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          target: runtime
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          build-args: |
            VERSION=${{ needs.build-builder.outputs.version }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.description=XRP HTML/XML-aware Reverse Proxy
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.version=${{ needs.build-builder.outputs.version }}

  # Step 4: Create GitHub Release (semver tags only)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-builder, build-binaries, build-images]
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref_name, '-')
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all binary artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts/
      
      - name: Prepare release artifacts
        run: |
          mkdir release
          
          # Copy binaries
          for dir in artifacts/xrp-*; do
            if [ -d "$dir" ]; then
              cp "$dir"/* release/
            fi
          done
          
          # Create compatibility.json
          cat > release/compatibility.json << EOF
          {
            "xrp_version": "${{ needs.build-builder.outputs.version }}",
            "builder_image": "${{ env.REGISTRY }}/${{ env.BUILDER_IMAGE_NAME }}:${{ needs.build-builder.outputs.version }}",
            "go_version": "$(grep '^go ' go.mod | cut -d' ' -f2)",
            "supported_platforms": ["linux/amd64", "linux/arm64", "linux/arm/v7"],
            "plugin_interface": {
              "package": "github.com/cdzombak/xrp/pkg/xrpplugin",
              "version": "${{ needs.build-builder.outputs.version }}"
            },
            "build_requirements": {
              "cgo_enabled": true,
              "debian_base": "bookworm-slim"
            }
          }
          EOF
          
          # Package SDK
          tar czf release/xrp-plugin-sdk.tar.gz -C build/sdk .
          
          # Create checksums
          cd release
          sha256sum * > checksums.txt
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release/*
          generate_release_notes: true
          draft: false
          prerelease: false